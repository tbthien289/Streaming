// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Stream.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package streaming;

public final class PlayerPrxHelper extends Ice.ObjectPrxHelperBase implements PlayerPrx
{
    private static final String __addTrack_name = "addTrack";

    public void addTrack(String name, String album, String author, String singer, String path)
    {
        addTrack(name, album, author, singer, path, null, false);
    }

    public void addTrack(String name, String album, String author, String singer, String path, java.util.Map<String, String> __ctx)
    {
        addTrack(name, album, author, singer, path, __ctx, true);
    }

    private void addTrack(String name, String album, String author, String singer, String path, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "addTrack", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _PlayerDel __del = (_PlayerDel)__delBase;
                    __del.addTrack(name, album, author, singer, path, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_addTrack(String name, String album, String author, String singer, String path)
    {
        return begin_addTrack(name, album, author, singer, path, null, false, null);
    }

    public Ice.AsyncResult begin_addTrack(String name, String album, String author, String singer, String path, java.util.Map<String, String> __ctx)
    {
        return begin_addTrack(name, album, author, singer, path, __ctx, true, null);
    }

    public Ice.AsyncResult begin_addTrack(String name, String album, String author, String singer, String path, Ice.Callback __cb)
    {
        return begin_addTrack(name, album, author, singer, path, null, false, __cb);
    }

    public Ice.AsyncResult begin_addTrack(String name, String album, String author, String singer, String path, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addTrack(name, album, author, singer, path, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_addTrack(String name, String album, String author, String singer, String path, Callback_Player_addTrack __cb)
    {
        return begin_addTrack(name, album, author, singer, path, null, false, __cb);
    }

    public Ice.AsyncResult begin_addTrack(String name, String album, String author, String singer, String path, java.util.Map<String, String> __ctx, Callback_Player_addTrack __cb)
    {
        return begin_addTrack(name, album, author, singer, path, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_addTrack(String name, String album, String author, String singer, String path, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __addTrack_name, __cb);
        try
        {
            __result.__prepare(__addTrack_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(name);
            __os.writeString(album);
            __os.writeString(author);
            __os.writeString(singer);
            __os.writeString(path);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_addTrack(Ice.AsyncResult __result)
    {
        __end(__result, __addTrack_name);
    }

    private static final String __deleteTrack_name = "deleteTrack";

    public int deleteTrack(String name)
    {
        return deleteTrack(name, null, false);
    }

    public int deleteTrack(String name, java.util.Map<String, String> __ctx)
    {
        return deleteTrack(name, __ctx, true);
    }

    private int deleteTrack(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "deleteTrack", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("deleteTrack");
                    __delBase = __getDelegate(false);
                    _PlayerDel __del = (_PlayerDel)__delBase;
                    return __del.deleteTrack(name, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_deleteTrack(String name)
    {
        return begin_deleteTrack(name, null, false, null);
    }

    public Ice.AsyncResult begin_deleteTrack(String name, java.util.Map<String, String> __ctx)
    {
        return begin_deleteTrack(name, __ctx, true, null);
    }

    public Ice.AsyncResult begin_deleteTrack(String name, Ice.Callback __cb)
    {
        return begin_deleteTrack(name, null, false, __cb);
    }

    public Ice.AsyncResult begin_deleteTrack(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_deleteTrack(name, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_deleteTrack(String name, Callback_Player_deleteTrack __cb)
    {
        return begin_deleteTrack(name, null, false, __cb);
    }

    public Ice.AsyncResult begin_deleteTrack(String name, java.util.Map<String, String> __ctx, Callback_Player_deleteTrack __cb)
    {
        return begin_deleteTrack(name, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_deleteTrack(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__deleteTrack_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __deleteTrack_name, __cb);
        try
        {
            __result.__prepare(__deleteTrack_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(name);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_deleteTrack(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __deleteTrack_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getListTrack_name = "getListTrack";

    public String getListTrack()
    {
        return getListTrack(null, false);
    }

    public String getListTrack(java.util.Map<String, String> __ctx)
    {
        return getListTrack(__ctx, true);
    }

    private String getListTrack(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getListTrack", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getListTrack");
                    __delBase = __getDelegate(false);
                    _PlayerDel __del = (_PlayerDel)__delBase;
                    return __del.getListTrack(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getListTrack()
    {
        return begin_getListTrack(null, false, null);
    }

    public Ice.AsyncResult begin_getListTrack(java.util.Map<String, String> __ctx)
    {
        return begin_getListTrack(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getListTrack(Ice.Callback __cb)
    {
        return begin_getListTrack(null, false, __cb);
    }

    public Ice.AsyncResult begin_getListTrack(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getListTrack(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getListTrack(Callback_Player_getListTrack __cb)
    {
        return begin_getListTrack(null, false, __cb);
    }

    public Ice.AsyncResult begin_getListTrack(java.util.Map<String, String> __ctx, Callback_Player_getListTrack __cb)
    {
        return begin_getListTrack(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getListTrack(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getListTrack_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getListTrack_name, __cb);
        try
        {
            __result.__prepare(__getListTrack_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getListTrack(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getListTrack_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __playTrack_name = "playTrack";

    public String playTrack(String name)
    {
        return playTrack(name, null, false);
    }

    public String playTrack(String name, java.util.Map<String, String> __ctx)
    {
        return playTrack(name, __ctx, true);
    }

    private String playTrack(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "playTrack", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("playTrack");
                    __delBase = __getDelegate(false);
                    _PlayerDel __del = (_PlayerDel)__delBase;
                    return __del.playTrack(name, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_playTrack(String name)
    {
        return begin_playTrack(name, null, false, null);
    }

    public Ice.AsyncResult begin_playTrack(String name, java.util.Map<String, String> __ctx)
    {
        return begin_playTrack(name, __ctx, true, null);
    }

    public Ice.AsyncResult begin_playTrack(String name, Ice.Callback __cb)
    {
        return begin_playTrack(name, null, false, __cb);
    }

    public Ice.AsyncResult begin_playTrack(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_playTrack(name, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_playTrack(String name, Callback_Player_playTrack __cb)
    {
        return begin_playTrack(name, null, false, __cb);
    }

    public Ice.AsyncResult begin_playTrack(String name, java.util.Map<String, String> __ctx, Callback_Player_playTrack __cb)
    {
        return begin_playTrack(name, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_playTrack(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__playTrack_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __playTrack_name, __cb);
        try
        {
            __result.__prepare(__playTrack_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(name);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_playTrack(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __playTrack_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __searchTrack_name = "searchTrack";

    public String searchTrack(String name)
    {
        return searchTrack(name, null, false);
    }

    public String searchTrack(String name, java.util.Map<String, String> __ctx)
    {
        return searchTrack(name, __ctx, true);
    }

    private String searchTrack(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "searchTrack", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("searchTrack");
                    __delBase = __getDelegate(false);
                    _PlayerDel __del = (_PlayerDel)__delBase;
                    return __del.searchTrack(name, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_searchTrack(String name)
    {
        return begin_searchTrack(name, null, false, null);
    }

    public Ice.AsyncResult begin_searchTrack(String name, java.util.Map<String, String> __ctx)
    {
        return begin_searchTrack(name, __ctx, true, null);
    }

    public Ice.AsyncResult begin_searchTrack(String name, Ice.Callback __cb)
    {
        return begin_searchTrack(name, null, false, __cb);
    }

    public Ice.AsyncResult begin_searchTrack(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_searchTrack(name, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_searchTrack(String name, Callback_Player_searchTrack __cb)
    {
        return begin_searchTrack(name, null, false, __cb);
    }

    public Ice.AsyncResult begin_searchTrack(String name, java.util.Map<String, String> __ctx, Callback_Player_searchTrack __cb)
    {
        return begin_searchTrack(name, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_searchTrack(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__searchTrack_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __searchTrack_name, __cb);
        try
        {
            __result.__prepare(__searchTrack_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(name);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_searchTrack(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __searchTrack_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __streamTrack_name = "streamTrack";

    public String streamTrack(String name)
    {
        return streamTrack(name, null, false);
    }

    public String streamTrack(String name, java.util.Map<String, String> __ctx)
    {
        return streamTrack(name, __ctx, true);
    }

    private String streamTrack(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "streamTrack", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("streamTrack");
                    __delBase = __getDelegate(false);
                    _PlayerDel __del = (_PlayerDel)__delBase;
                    return __del.streamTrack(name, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_streamTrack(String name)
    {
        return begin_streamTrack(name, null, false, null);
    }

    public Ice.AsyncResult begin_streamTrack(String name, java.util.Map<String, String> __ctx)
    {
        return begin_streamTrack(name, __ctx, true, null);
    }

    public Ice.AsyncResult begin_streamTrack(String name, Ice.Callback __cb)
    {
        return begin_streamTrack(name, null, false, __cb);
    }

    public Ice.AsyncResult begin_streamTrack(String name, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_streamTrack(name, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_streamTrack(String name, Callback_Player_streamTrack __cb)
    {
        return begin_streamTrack(name, null, false, __cb);
    }

    public Ice.AsyncResult begin_streamTrack(String name, java.util.Map<String, String> __ctx, Callback_Player_streamTrack __cb)
    {
        return begin_streamTrack(name, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_streamTrack(String name, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__streamTrack_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __streamTrack_name, __cb);
        try
        {
            __result.__prepare(__streamTrack_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(name);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_streamTrack(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __streamTrack_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public static PlayerPrx checkedCast(Ice.ObjectPrx __obj)
    {
        PlayerPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof PlayerPrx)
            {
                __d = (PlayerPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    PlayerPrxHelper __h = new PlayerPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static PlayerPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        PlayerPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof PlayerPrx)
            {
                __d = (PlayerPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    PlayerPrxHelper __h = new PlayerPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static PlayerPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        PlayerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    PlayerPrxHelper __h = new PlayerPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static PlayerPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        PlayerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    PlayerPrxHelper __h = new PlayerPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static PlayerPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        PlayerPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof PlayerPrx)
            {
                __d = (PlayerPrx)__obj;
            }
            else
            {
                PlayerPrxHelper __h = new PlayerPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static PlayerPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        PlayerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            PlayerPrxHelper __h = new PlayerPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::streaming::Player"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _PlayerDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _PlayerDelD();
    }

    public static void __write(IceInternal.BasicStream __os, PlayerPrx v)
    {
        __os.writeProxy(v);
    }

    public static PlayerPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            PlayerPrxHelper result = new PlayerPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
